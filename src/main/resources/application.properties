# Environment Variables
spring.datasource.url=${url}
spring.datasource.username=${username}
spring.datasource.password=${password}

# God knows
spring.datasource.driverclassname=com.mysql.cj.jdbc.Driver

# Show error messages in HTTP responses and show JPA doing SQL in console
server.error.include-message=always
spring.jpa.show-sql=true

# JPA update or create-drop DB on app execution
spring.jpa.hibernate.ddl-auto= update

# Try to fix connection time-out
spring.datasource.hikari.maximumPoolSize = 10
# 28,800,000 milliseconds = 28,800 seconds which happens to be the MySQL default value for connection time-out
spring.datasource.hikari.idleTimeout = 28800000
# Default maxLifeTime: 1800000 ms. This might be too high when compared to our database time-out.
# If maxLifeTime is higher than the database timeout, when a MySQL connection times out, Hikari expects it to still be open
# And it is thus how we get the exception that we usually see.
# The strange thing is that the MySQL time_out property is 28800 seconds by default, which is equal to 8 hours;
# 8 hours should be more than enough for the Hikari maxLifeTime default not to surpass it.
# Therefore, my best guess is that something on Azure or on Docker is the actual bottleneck.
spring.datasource.hikari.maxLifetime = 120000